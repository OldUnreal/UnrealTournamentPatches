/*=============================================================================
	Extension.incl, GL shader extensions to be loaded.
	This data is added before any other shader data.

	Revision history:
		* Created by Smirftsch
=============================================================================*/
#if BINDLESSTEXTURES // defined for all variants of our bindlesstextures support
#extension GL_ARB_bindless_texture : require
#endif

#if BINDLESS_STORAGE_UBO // defined if we're going to store handles in a UBO

#elif BINDLESS_STORAGE_SSBO // defined if we're going to store handles in a (much larger) SSBO
#extension GL_ARB_shading_language_420pack : require

#elif BINDLESS_STORAGE_INT // defined if we're going to pass handles directly to the shader using uniform parameters or the drawcall's parameters in the parameter SSBO
#extension GL_ARB_gpu_shader_int64 : require
#endif

#if SHADERDRAWPARAMETERS
#extension GL_ARB_shader_draw_parameters : require
#extension GL_ARB_shading_language_420pack : require
#endif

#ifdef GL_ES
// The following extension appears not to be available on RaspberryPi4 at the moment.
#extension GL_EXT_clip_cull_distance : enable

// This determines how much precision the GPU uses when calculating. Performance critical (especially on low end)!! Not every option is available on any platform. Todo: separate option for vert and frag?
precision highp float; // options: lowp/mediump/highp, should be mediump for performance reasons, but appears to cause trouble determining DrawFlags then !?! (Currently on NVIDIA 470.103.01).
precision highp int;
#endif

// The following directive resets the line number to 1 to have the correct output logging for a possible error within the shader files.
#line 1
